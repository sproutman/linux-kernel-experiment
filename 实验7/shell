1.mknod

　　用途
　　创建特殊文件。
　　语法
　　只能由 root 用户或系统组成员运行
　　mknod Name { b | c } Major Minor
　　创建 FIFO（已命名的管道）
　　mknod Name { p }
　　描述
　　mknod 命令建立一个目录项和一个特殊文件的对应索引节点。第一个参数是 Name 项设备的名称。选择一个描述性的设备名称。mknod 命令有两种形式，它们有不同的标志。
　　mknod 命令的第一种形式只能由 root 用户或系统组成员执行。在第一种形式中，使用了b 或 c 标志。b 标志表示这个特殊文件是面向块的设备（磁盘、软盘或磁带）。c 标志表示这个特殊文件是面向字符的设备（其他设备）。
　　第一种形式的最后两个参数是指定主设备的数目，它帮助操作系统查找设备驱动程序代码，和指定次设备的数目，也就是单元驱动器或行号，它们是十进制或八进制的。一个设备的主要和次要编号由该设备的配置方法分配，它们保存在 ODM 中的 CuDvDr 类里。在这个对象类中定义了主要和次要编号以确保整个系统设备定义的一致性，这是很重要的。
　　在 mknod 命令的第二种形式中，使用了 p 标志来创建 FIFO（已命名的管道）。

2.硬链接与符号链接
软链接，一种是硬链接

链接与win下的快捷方式相似，不过不一样，如:linux下可以为一个库做一个软链接，应用程序可以通过这个软链接调用库，win下就不可以

硬链接，就是为一个文件创建别名， 目录不可以建硬链接

硬连接 ：

源文件名和链接文件名都指向相同的物理地址，目录不能够有硬连接，文件在磁盘中只有一个复制，可以节省硬盘空间，由于删除文件要在同一个索引节点属于唯一的连接时才能成功，因此可以防止不必要的误删除.
硬连接：ln SourceFIle TargetFile 
硬链接文件有两个限制
　　1)、不允许给目录创建硬链接；
　　2)、只有在同一文件系统中的文件之间才能创建链接。
　　对硬链接文件进行读写和删除操作时候，结果和软链接相同。但如果我们删除硬链接文件的源文件，硬链接文件仍然存在，而且保留了愿有的内容。 pc007.com 
    这时，系统就“忘记”了它曾经是硬链接文件。而把他当成一个普通文件。

软连接：

软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。
    链接文件甚至可以链接不存在的文件，这就产生一般称之为"断链"的问题(或曰“现象")，链接文件甚至可以循环链接自己。类似于编程语言中的递归。
软连接：ln -s SourceFile TargetFile 
　　在对符号文件进行读或写操作的时候，系统会自动把该操作转换为对源文件的操作，但删除链接文件时，系统仅仅删除链接文件，而不删除源文件本身。

硬连接和软连接区别：

    软链接是另一个文件，作用可以理解为一个指针，作用在这个文件上的操作除了删除都直接转向实际指向文件，由于是一个真实的文件所以占用磁盘空间

    硬链接可以认为不是一个文件，它只是实际文件的一个别名，它的作用是防止真实文件被误操作，给一个文件建立硬链接后，他们互为别名，删除其中任意一个，

    只会删除该别名，实际文件并不会被删除。由于只是别名没有任何其他信息，所以并不占用原始文件大小的磁盘空间。

实例如下：

例如 
当前目录下有文件aa 
ls -l 
-rw-r--r--    2 root      sys            61 Aug 30 13:44 aa 
现分别建立两个连接：

ln aa aaa       #硬连接

ln -s aa aaaa   #软连接

ls -l

-rw-r--r--    2 root      sys            61 Aug 30 13:44 aa

-rw-r--r--    2 root      sys            61 Aug 30 13:44 aaa

lrwxrwxrwx    1 root      sys             2 Aug 30 19:10 aaaa -> aa

软连接只产生了2字节的快捷而已，硬连接却实实在在的61字节的拷贝

3.运行Shell程序的方法
    用户可以用任何编辑器来编写Shell程序。因为Shell程序是解释执行的，所以不需要编译成目的程序。按照Shell编程的惯例，以bash为例，程序的第一行一般为“# ! /bin/bash”，其中#表示该行是注释，叹号！告诉Shell运行叹号之后的命令并用文档的其余部分作为输入，也就是运行/bin/bash去执行Shell程序的内容。
    执行Shell程序的方法主要有3种：
1）bash Shell程序文件名
    例如：bash lx 1
    这实际上是调用一个新的bash命令解释程序，而把Shell程序文件名作为参数传递给它。新启动的Shell将去读指定的文件，执行文件中列出的命令，当所有的命令都执行完后结束。该方法的优点是可以利用Shell调试功能。
2）bash < Shell程序文件名
    这种方式就是利用输入重定向，使Shell命令解释程序的输入取自指定的程序文件。
    例如：bash< lx 1
3）用chmod命令使Shell程序成为可执行的
    一个文件能否运行取决于该文档的内容本身是否可执行且该文件具有执行权。对于Shell程序，当用编辑器生成一个文件时，系统赋予的许可权都是644（rw-r-r--），因此，当用户需要运行这个文件时，只需要修改文件的可执行权限，然后直接键入文件名即可。
